 
import processing.serial.*;

Serial myPort;  // Create object from Serial class
int xh, xl; // x high byte, low byte
int yh, yl; // y high byte, low byte
int hh, hl; // height
int wh, wl; // width
int colh, coll; //color high byte, low byte
int bgcolh, bgcoll; //color high byte, low byte
int val1, val2; //val1 is always 90 as a start command, val2 is the drawing function
int check; // minimal check value - should always return 88 when command was transmitted correctly
int col, r, g, b;
color c;
color bgcolor;
int ch;
int size;

// 5x7 font
int[] font = {
  0x00, 0x00, 0x00, 0x00, 0x00,//
  0x3E, 0x5B, 0x4F, 0x5B, 0x3E,//
  0x3E, 0x6B, 0x4F, 0x6B, 0x3E,//
  0x1C, 0x3E, 0x7C, 0x3E, 0x1C,//
  0x18, 0x3C, 0x7E, 0x3C, 0x18,//
  0x1C, 0x57, 0x7D, 0x57, 0x1C,//
  0x1C, 0x5E, 0x7F, 0x5E, 0x1C,//
  0x00, 0x18, 0x3C, 0x18, 0x00,//
  0xFF, 0xE7, 0xC3, 0xE7, 0xFF,//
  0x00, 0x18, 0x24, 0x18, 0x00,//
  0xFF, 0xE7, 0xDB, 0xE7, 0xFF,//
  0x30, 0x48, 0x3A, 0x06, 0x0E,//
  0x26, 0x29, 0x79, 0x29, 0x26,//
  0x40, 0x7F, 0x05, 0x05, 0x07,//
  0x40, 0x7F, 0x05, 0x25, 0x3F,//
  0x5A, 0x3C, 0xE7, 0x3C, 0x5A,//
  0x7F, 0x3E, 0x1C, 0x1C, 0x08,//
  0x08, 0x1C, 0x1C, 0x3E, 0x7F,//
  0x14, 0x22, 0x7F, 0x22, 0x14,//
  0x5F, 0x5F, 0x00, 0x5F, 0x5F,//
  0x06, 0x09, 0x7F, 0x01, 0x7F,//
  0x00, 0x66, 0x89, 0x95, 0x6A,//
  0x60, 0x60, 0x60, 0x60, 0x60,//
  0x94, 0xA2, 0xFF, 0xA2, 0x94,//
  0x08, 0x04, 0x7E, 0x04, 0x08,//
  0x10, 0x20, 0x7E, 0x20, 0x10,//
  0x08, 0x08, 0x2A, 0x1C, 0x08,//
  0x08, 0x1C, 0x2A, 0x08, 0x08,//
  0x1E, 0x10, 0x10, 0x10, 0x10,//
  0x0C, 0x1E, 0x0C, 0x1E, 0x0C,//
  0x30, 0x38, 0x3E, 0x38, 0x30,//
  0x06, 0x0E, 0x3E, 0x0E, 0x06,//
  0x00, 0x00, 0x00, 0x00, 0x00,//
  0x00, 0x00, 0x5F, 0x00, 0x00,// !
  0x00, 0x07, 0x00, 0x07, 0x00,// "
  0x14, 0x7F, 0x14, 0x7F, 0x14,// #
  0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
  0x23, 0x13, 0x08, 0x64, 0x62,// %
  0x36, 0x49, 0x55, 0x22, 0x50,// &
  0x00, 0x05, 0x03, 0x00, 0x00,// '
  0x00, 0x1C, 0x22, 0x41, 0x00,// (
  0x00, 0x41, 0x22, 0x1C, 0x00,// )
  0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
  0x08, 0x08, 0x3E, 0x08, 0x08,// +
  0x00, 0x50, 0x30, 0x00, 0x00,// ,
  0x08, 0x08, 0x08, 0x08, 0x08,// -
  0x00, 0x60, 0x60, 0x00, 0x00,// .
  0x20, 0x10, 0x08, 0x04, 0x02,// /
  0x7F, 0x51, 0x49, 0x45, 0x7F,// 0
  0x40, 0x41, 0x7F, 0x40, 0x40,// 1
  0x79, 0x49, 0x49, 0x49, 0x4F,// 2
  0x49, 0x49, 0x49, 0x49, 0x7F,// 3
  0x0F, 0x08, 0x08, 0x08, 0x7F,// 4
  0x4F, 0x49, 0x49, 0x49, 0x79,// 5
  0x7F, 0x49, 0x49, 0x49, 0x79,// 6
  0x01, 0x01, 0x71, 0x09, 0x07,// 7
  0x7F, 0x49, 0x49, 0x49, 0x7F,// 8
  0x0F, 0x09, 0x09, 0x09, 0x7F,// 9
  0x00, 0x36, 0x36, 0x00, 0x00,// :
  0x00, 0x56, 0x36, 0x00, 0x00,// ;
  0x00, 0x08, 0x14, 0x22, 0x41,// <
  0x14, 0x14, 0x14, 0x14, 0x14,// =
  0x41, 0x22, 0x14, 0x08, 0x00,// >
  0x02, 0x01, 0x51, 0x09, 0x06,// ?
  0x32, 0x49, 0x79, 0x41, 0x3E,// @  //64
  0x7E, 0x09, 0x09, 0x09, 0x7E,// A
  0x7F, 0x49, 0x49, 0x49, 0x36,// B
  0x3E, 0x41, 0x41, 0x41, 0x22,// C
  0x7F, 0x41, 0x41, 0x41, 0x3E,// D
  0x7F, 0x49, 0x49, 0x49, 0x41,// E
  0x7F, 0x09, 0x09, 0x01, 0x01,// F
  0x3E, 0x41, 0x41, 0x51, 0x32,// G
  0x7F, 0x08, 0x08, 0x08, 0x7F,// H
  0x41, 0x41, 0x7F, 0x41, 0x41,// I
  0x20, 0x40, 0x41, 0x3F, 0x01,// J
  0x7F, 0x08, 0x14, 0x22, 0x41,// K
  0x7F, 0x40, 0x40, 0x40, 0x40,// L
  0x7F, 0x02, 0x04, 0x02, 0x7F,// M
  0x7F, 0x02, 0x04, 0x08, 0x7F,// N
  0x3E, 0x41, 0x41, 0x41, 0x3E,// O
  0x7F, 0x09, 0x09, 0x09, 0x06,// P
  0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
  0x7F, 0x09, 0x09, 0x19, 0x66,// R
  0x46, 0x49, 0x49, 0x49, 0x31,// S
  0x01, 0x01, 0x7F, 0x01, 0x01,// T
  0x3F, 0x40, 0x40, 0x40, 0x3F,// U
  0x1F, 0x20, 0x40, 0x20, 0x1F,// V
  0x7F, 0x20, 0x18, 0x20, 0x7F,// W
  0x63, 0x14, 0x08, 0x14, 0x63,// X
  0x47, 0x48, 0x48, 0x48, 0x3F,// Y
  0x61, 0x51, 0x49, 0x45, 0x43,// Z
  0x00, 0x00, 0x7F, 0x41, 0x41,// [
  0x02, 0x04, 0x08, 0x10, 0x20,// "\"
  0x41, 0x41, 0x7F, 0x00, 0x00,// ]
  0x04, 0x02, 0x01, 0x02, 0x04,// ^
  0x40, 0x40, 0x40, 0x40, 0x40,// _
  0x00, 0x01, 0x02, 0x04, 0x00,// `
  0x38, 0x44, 0x44, 0x44, 0x7C,// a
  0x7E, 0x44, 0x44, 0x44, 0x38,// b
  0x38, 0x44, 0x44, 0x44, 0x44,// c
  0x38, 0x44, 0x44, 0x44, 0x7E,// d
  0x38, 0x54, 0x54, 0x54, 0x58,// e
  0x10, 0x7C, 0x12, 0x12, 0x12,// f
  0x1C, 0x54, 0x54, 0x54, 0x3C,// g
  0x7E, 0x04, 0x04, 0x04, 0x78,// h
  0x00, 0x44, 0x7D, 0x40, 0x00,// i
  0x20, 0x40, 0x44, 0x3D, 0x00,// j
  0x00, 0x7F, 0x10, 0x28, 0x44,// k
  0x3C, 0x40, 0x40, 0x40, 0x40,// l
  0x7C, 0x04, 0x78, 0x04, 0x7C,// m
  0x7C, 0x04, 0x04, 0x04, 0x78,// n
  0x38, 0x44, 0x44, 0x44, 0x38,// o
  0x7C, 0x24, 0x24, 0x24, 0x1C,// p
  0x38, 0x24, 0x24, 0x24, 0x7C,// q
  0x78, 0x04, 0x04, 0x04, 0x04,// r
  0x58, 0x54, 0x54, 0x54, 0x34,// s
  0x04, 0x3E, 0x44, 0x44, 0x44,// t
  0x3C, 0x40, 0x40, 0x40, 0x3C,// u
  0x1C, 0x20, 0x40, 0x20, 0x1C,// v
  0x3C, 0x40, 0x30, 0x40, 0x3C,// w
  0x44, 0x28, 0x10, 0x28, 0x44,// x
  0x4C, 0x50, 0x50, 0x50, 0x3C,// y
  0x44, 0x64, 0x54, 0x4C, 0x44,// z
  0x00, 0x08, 0x36, 0x41, 0x00,// {
  0x00, 0x00, 0x7F, 0x00, 0x00,// |
  0x00, 0x41, 0x36, 0x08, 0x00,// }
  0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
  0x08, 0x1C, 0x2A, 0x08, 0x08, // <-
  0x1E, 0xA1, 0xA1, 0x61, 0x12,
  0x3A, 0x40, 0x40, 0x20, 0x7A,
  0x38, 0x54, 0x54, 0x55, 0x59,
  0x21, 0x55, 0x55, 0x79, 0x41,
  0x22, 0x54, 0x54, 0x78, 0x42, // a-umlaut
  0x21, 0x55, 0x54, 0x78, 0x40,
  0x20, 0x54, 0x55, 0x79, 0x40,
  0x0C, 0x1E, 0x52, 0x72, 0x12,
  0x40, 0x30, 0x0c, 0x02, 0x7F,  // BRAIDS Wave 1 SAW  // 0x39, 0x55, 0x55, 0x55, 0x59,  // note: grid is vertical slices
  0x10, 0x08, 0x04, 0x1e, 0x00,  // BRAIDS Centered SAW
  0x40, 0x20, 0x10, 0x08, 0x7C,  // BRAIDS BABY SAW
  0x60, 0x1C, 0x03, 0x1C, 0x60,  // BRAID TRIANGLE
  0x7f, 0x01, 0x01, 0x01, 0x7f,  // BRAIDS SQUARE
  0x78, 0x08, 0x08, 0x08, 0x78,  // BRAIDS BABY SQUARE
  0x40, 0x40, 0x7F, 0x01, 0x7F,  // BRAIDS PULSE  0x7D, 0x12, 0x11, 0x12, 0x7D A-umlaut 
  0xF0, 0x28, 0x25, 0x28, 0xF0,
  0x7C, 0x54, 0x55, 0x45, 0x00,
  0x20, 0x54, 0x54, 0x7C, 0x54,
  0x7C, 0x0A, 0x09, 0x7F, 0x49,
  0x32, 0x49, 0x49, 0x49, 0x32,
  0x3A, 0x44, 0x44, 0x44, 0x3A, // o-umlaut
  0x32, 0x4A, 0x48, 0x48, 0x30,
  0x3A, 0x41, 0x41, 0x21, 0x7A,
  0x3A, 0x42, 0x40, 0x20, 0x78,
  0x00, 0x9D, 0xA0, 0xA0, 0x7D,
  0x3D, 0x42, 0x42, 0x42, 0x3D, // O-umlaut
  0x3D, 0x40, 0x40, 0x40, 0x3D,
  0x3C, 0x24, 0xFF, 0x24, 0x24,
  0x48, 0x7E, 0x49, 0x43, 0x66,
  0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
  0xFF, 0x09, 0x29, 0xF6, 0x20,
  0xC0, 0x88, 0x7E, 0x09, 0x03,
  0x20, 0x54, 0x54, 0x79, 0x41,
  0x00, 0x00, 0x44, 0x7D, 0x41,
  0x30, 0x48, 0x48, 0x4A, 0x32,
  0x38, 0x40, 0x40, 0x22, 0x7A,
  0x00, 0x7A, 0x0A, 0x0A, 0x72,
  0x7D, 0x0D, 0x19, 0x31, 0x7D,
  0x26, 0x29, 0x29, 0x2F, 0x28,
  0x26, 0x29, 0x29, 0x29, 0x26,
  0x30, 0x48, 0x4D, 0x40, 0x20,
  0x38, 0x08, 0x08, 0x08, 0x08,
  0x08, 0x08, 0x08, 0x08, 0x38,
  0x2F, 0x10, 0xC8, 0xAC, 0xBA,
  0x2F, 0x10, 0x28, 0x34, 0xFA,
  0x00, 0x00, 0x7B, 0x00, 0x00,
  0x08, 0x14, 0x2A, 0x14, 0x22,
  0x22, 0x14, 0x2A, 0x14, 0x08,
  0x55, 0x00, 0x55, 0x00, 0x55, // #176 (25% block) missing in old // code
  0xAA, 0x55, 0xAA, 0x55, 0xAA,  // 50% block
  0xFF, 0x55, 0xFF, 0x55, 0xFF,  // 75% block
  0x00, 0x00, 0x00, 0xFF, 0x00,
  0x10, 0x10, 0x10, 0xFF, 0x00,
  0x14, 0x14, 0x14, 0xFF, 0x00,
  0x10, 0x10, 0xFF, 0x00, 0xFF,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x14, 0x14, 0x14, 0xFC, 0x00,
  0x14, 0x14, 0xF7, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x14, 0x14, 0xF4, 0x04, 0xFC,
  0x14, 0x14, 0x17, 0x10, 0x1F,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0x1F, 0x00,
  0x10, 0x10, 0x10, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0xF0, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x10,
  0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x10, 0x10, 0xFF, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x14,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0x00, 0x1F, 0x10, 0x17,
  0x00, 0x00, 0xFC, 0x04, 0xF4,
  0x14, 0x14, 0x17, 0x10, 0x17,
  0x14, 0x14, 0xF4, 0x04, 0xF4,
  0x00, 0x00, 0xFF, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x14, 0x14, 0xF7, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x17, 0x14,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0xF4, 0x14,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x00, 0x00, 0x1F, 0x10, 0x1F,
  0x00, 0x00, 0x00, 0x1F, 0x14,
  0x00, 0x00, 0x00, 0xFC, 0x14,
  0x00, 0x00, 0xF0, 0x10, 0xF0,
  0x10, 0x10, 0xFF, 0x10, 0xFF,
  0x14, 0x14, 0x14, 0xFF, 0x14,
  0x10, 0x10, 0x10, 0x1F, 0x00,
  0x00, 0x00, 0x00, 0xF0, 0x10,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF,
  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
  0x38, 0x44, 0x44, 0x38, 0x44,
  0xFC, 0x4A, 0x4A, 0x4A, 0x34, // sharp-s or beta
  0x7E, 0x02, 0x02, 0x06, 0x06,
  0x02, 0x7E, 0x02, 0x7E, 0x02,
  0x63, 0x55, 0x49, 0x41, 0x63,
  0x38, 0x44, 0x44, 0x3C, 0x04,
  0x40, 0x7E, 0x20, 0x1E, 0x20,
  0x06, 0x02, 0x7E, 0x02, 0x02,
  0x99, 0xA5, 0xE7, 0xA5, 0x99,
  0x1C, 0x2A, 0x49, 0x2A, 0x1C,
  0x4C, 0x72, 0x01, 0x72, 0x4C,
  0x30, 0x4A, 0x4D, 0x4D, 0x30,
  0x30, 0x48, 0x78, 0x48, 0x30,
  0xBC, 0x62, 0x5A, 0x46, 0x3D,
  0x3E, 0x49, 0x49, 0x49, 0x00,
  0x7E, 0x01, 0x01, 0x01, 0x7E,
  0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
  0x44, 0x44, 0x5F, 0x44, 0x44,
  0x40, 0x51, 0x4A, 0x44, 0x40,
  0x40, 0x44, 0x4A, 0x51, 0x40,
  0x00, 0x00, 0xFF, 0x01, 0x03,
  0xE0, 0x80, 0xFF, 0x00, 0x00,
  0x08, 0x08, 0x6B, 0x6B, 0x08,
  0x36, 0x12, 0x36, 0x24, 0x36,
  0x06, 0x0F, 0x09, 0x0F, 0x06,
  0x00, 0x00, 0x18, 0x18, 0x00,
  0x00, 0x00, 0x10, 0x10, 0x00,
  0x30, 0x40, 0xFF, 0x01, 0x01,
  0x00, 0x1F, 0x01, 0x01, 0x1E,
  0x00, 0x19, 0x1D, 0x17, 0x12,
  0x00, 0x3C, 0x3C, 0x3C, 0x3C,
  0x00, 0x00, 0x00, 0x00, 0x00 // #255 NBSP
};

int bitRead(int b, int bitPos)
{
  int x = b & (1 << bitPos);
  return x == 0 ? 0 : 1;
}

void drawChar(int x, int y, int ch, int col, int bg, int size) {

  for (int i = 0; i < 5; i++) { // Char bitmap = 5 columns

    int line = font[ch*5+i];
    for (int j = 0; j < 8; j++, line >>= 1)
    {
      if ( bitRead(line, 0) ==1  )
      {
        fill(c);
      if (size == 1 )
        rect( (x + i)*2, (y + j)*2, 2, 2  );
      else
        rect( x*2+i*4, y*2 + j*4, 4, 4  );
      }
      else
       if ( bitRead(line, 0) ==0 && bg != col )
      {
        fill(bgcolor);

      if (size == 1 )
        rect( (x + i)*2, (y + j)*2, 2, 2  );
      else
        rect( x*2+i*4, y*2 + j*4, 4, 4  );
      }
    }
  }

  if (bg != col)
  { // If opaque, draw vertical line for last column
   fill(bgcolor);
    if (size == 1 )
        rect( (x + 5)*2, y *2, 2, 16  );
    else
      rect( x*2 + 5*4, y *2, 4, 32  );
  }
}

void setup()
{
  size(640, 480);
  String portName = Serial.list()[1];
  myPort = new Serial(this, portName);
  myPort.buffer(116);
}

void readxy()
{
  xh = myPort.read();
  xl = myPort.read();
  yh = myPort.read();
  yl = myPort.read();
}
void readchar()
{
  ch = myPort.read();
}
void readsize()
{
  size = myPort.read();
}
void readcolor()
{
  colh= myPort.read();
  coll= myPort.read();
  col =  colh*256+coll;
  b = (((col) & 0x001F) << 3) & 0xFF;
  g = (((col) & 0x07E0) >>> 3) & 0xFF;
  r = (((col) & 0xF800) >>> 8) & 0xFF;
  c = color(r, g, b);
  fill(c);
  noStroke();
}

void readbgcolor()
{
  bgcolh= myPort.read();
  bgcoll= myPort.read();
  bgcolor =  bgcolh*256+bgcoll;
  b = (((bgcolor) & 0x001F) << 3) & 0xFF;
  g = (((bgcolor) & 0x07E0) >>> 3) & 0xFF;
  r = (((bgcolor) & 0xF800) >>> 8) & 0xFF;
  bgcolor = color(r, g, b);
  fill(c);
  noStroke();
}

void draw()
{
  while (myPort.available() > 0)
  {
    val1 = myPort.read();

    if (val1==99) // all commands start with 99
    {
      val2 = myPort.read();
      if (val2==90) // draw pixel (draw commands are from 90 - 94)
      {
        readxy();
        readcolor();
        check= myPort.read();
        if (check==88)
          rect((xh*256+xl)*2, (yh*256+yl)*2, 2, 2  );
      } else if (val2 == 91)  //draw vline
      {
        readxy();
        hh = myPort.read();
        hl = myPort.read();
        readcolor();
        check= myPort.read();
        if (check==88)
          rect((xh*256+xl)*2, (yh*256+yl)*2, 2, (hh*256+hl) *2 );
      } else if (val2==92) // draw hline
      {
        readxy();
        wh = myPort.read();
        wl = myPort.read();
        readcolor();
        check= myPort.read();
        if (check==88)
          rect((xh*256+xl)*2, (yh*256+yl)*2, (wh*256+wl) *2, 2  );
      } else if (val2==93)  // fill screen
      {
        readcolor();
        check= myPort.read();
        if (check==88)
         rect(0, 0, 960, 640);
         
      } else if (val2==94)  //fill rect
      {
        readxy();
        wh = myPort.read();
        wl = myPort.read();
        hh = myPort.read();
        hl = myPort.read();
        readcolor();
        check= myPort.read();
        if (check==88)
 rect((xh*256+xl)*2, (yh*256+yl)*2, (wh*256+wl) *2, (hh*256+hl) *2  );
         
      } else if (val2==95) // draw char
      {
        readxy();
        readcolor();
        readbgcolor();
        readchar();
        readsize();

        //text(   char(myPort.read() ), (xh*256+xl)*2, (yh*256+yl)*2);

        check= myPort.read();
        if (check==88)
          drawChar((xh*256+xl), (yh*256+yl), ch, c, bgcolor, size);
          
      }
    }
  }
 // if (keyPressed)
 //   saveFrame("microdexed-######.png");
}
